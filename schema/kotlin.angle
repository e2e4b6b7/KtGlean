schema kotlin.1 {

type Unit = {}

predicate File : string
predicate Package : string

type Loc = {
    file : File,
    offset : nat,
}

# Visibility scope of declaration
type Visibility = enum { Private | Protected | Public | Internal }

type Variance = enum { InVariance | OutVariance | Invariant }

type Modifier = enum { Data | Value | Sealed | Interface | Open }

type Nullability = enum { NotNull | Nullable | Unknown }

predicate QName : {
    package : Package,
    name : string,
}

predicate TypeRef : {
    explicitRef: {
		class : QName,
	#   typeParameters
	} |
	parameterRef : string |
	star : Unit |
}

predicate Type : {
    ref : TypeRef,
    nullability : Nullability,
}

predicate TypeParameter : {
    name : string,
    isReified : bool,
    bound : [Type],
    variance : Variance,
}

predicate ClassDeclaration : {
  	name : QName,
   	supertypes : [TypeRef],
    typeParams : [TypeParameter],
    modifiers : [Modifier],
    loc: Loc,
}

predicate FunctionDeclaration : {
    name : QName,
    argTypes : [Type],
    typeParams : [TypeParameter],
    returnType : Type,
    modifiers : [Modifier],
    loc : Loc,
}

predicate PropertyDeclaration : {
    name : QName,
    typeParams : [TypeParameter],
    type : Type,
    mutable : bool,
    modifiers : [Modifier],
    loc : Loc
}

predicate XRefTarget : {
    class_ : ClassDeclaration |
    function_ : FunctionDeclaration |
    property_ : PropertyDeclaration |
}

predicate XRef : {
    target : XRefTarget,
    loc : Loc,
}

predicate FunctionCall : {
   	function : FunctionDeclaration,
    loc : Loc,
}

}

schema floatLiteralAnalysis.1 {
import kotlin.1

predicate FloatLiteralUsage : {
    call : kotlin.FunctionCall,
    literal : string,
    position : nat,
}

}

schema rangesAnalysis.1 {
import kotlin.1

predicate RangeCall : {
     call : kotlin.FunctionCall,
     context : enum { FOR | WHILE | IF | WHEN | PROPERTY | FOREACH | MAP | TOLIST | REQUIRE | OTHER },
}

}

schema all.1 : kotlin.1, floatLiteralAnalysis.1, rangesAnalysis.1 {}
